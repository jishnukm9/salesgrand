"""
Django settings for sensefrog project.

Generated by 'django-admin startproject' using Django 3.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from django.utils import timezone
from dotenv import load_dotenv
from logging.handlers import RotatingFileHandler
from logging.handlers import WatchedFileHandler

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.environ.get("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Email settings


ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "social",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_session_timeout.middleware.SessionTimeoutMiddleware",
    # custom middleare
    'middleware.custom_middleware.RequestTimingMiddleware',
]

ROOT_URLCONF = "sensefrog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.globalvar.global_var",
                "core.globalvar.custom_variables",
            ],
        },
    },
]

WSGI_APPLICATION = "sensefrog.wsgi.application"
# ASGI_APPLICATION = 'sensefrog.asgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# Uncomment below lines for development testing

# SQLITE LOCAL
# if SITE == "DEV":

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# POSTGRES LOCAL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'magnusksabackup',
#         'USER': 'postgres',
#         'PASSWORD': '1Cat2Fish!',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Added below lines for production database
# Comment below lines during development testing

# if SITE == "PROD":
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#         'HOST': os.environ.get('DB_HOST'),
#         'PORT': os.environ.get('DB_PORT'),
#         }
# }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = 'UTC'

TIME_ZONE = "Asia/Riyadh"
# TIME_ZONE =str(timezone.get_current_timezone())


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


STATIC_URL = "/static/"
STATIC_ROOT = "/static/"


LOGIN_REDIRECT_URL = "index"
LOGOUT_REDIRECT_URL = "index"

WKHTMLTOPDF_PATH = "/usr/local/bin/wkhtmltopdf"

# timeout parameter for 1 hour
SESSION_COOKIE_AGE = 60 * 60
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True


from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),
}


MEDIA_URL = "/media/"
# if SITE == "DEV":
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# else:
# MEDIA_ROOT = '/media/'

CSRF_TRUSTED_ORIGINS = [
    "http://140.238.243.5",
    "http://141.148.209.58",
    "https://*.senseweave.com",
    "https://*.salesgrand.com",
    "http://*.salesgrand.com",
    "https://magnusksa.com",
    "http://magnusksa.com",
   
]



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

     'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    # Define separate handlers for different log files
    'handlers': {
        # 'django_file': {  # Handler for django
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.WatchedFileHandler',
        #     'filename': os.path.join(BASE_DIR, 'django_debug.log'), 
            
        #     'formatter': 'verbose',
        # },
        # 'django_db_file': {  # Handler for django.db.backends
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.WatchedFileHandler',
        #     'filename': os.path.join(BASE_DIR, 'django_debug_db.log'), 
          
        #     'formatter': 'verbose',
        # },
        'performance_file': {  # Handler for performance logs
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(BASE_DIR, 'performance.log'), 
            'formatter': 'verbose',
        },
    },

    # Define loggers
    'loggers': {
        # 'django': {  # Logger for django
        #     'handlers': ['django_file'],  # Use django_file handler
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'django.db.backends': {  # Logger for database queries
        #     'handlers': ['django_db_file'], 
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },
        'performance': {  # Custom logger for performance tracking
            'handlers': ['performance_file'],  
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


